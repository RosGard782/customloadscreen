name: Build CustomLoadScreen ASI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          mingw-w64 \
          mingw-w64-tools \
          qt5-qmake \
          qtbase5-dev \
          qtbase5-dev-tools \
          wine \
          wget \
          unzip

    - name: Install Qt5 for MinGW
      run: |
        # Download and install Qt5 for MinGW cross-compilation
        wget -q https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz
        tar -xf qt-everywhere-src-5.15.2.tar.xz
        cd qt-everywhere-src-5.15.2
        
        # Configure Qt for MinGW cross-compilation
        ./configure \
          -opensource \
          -confirm-license \
          -xplatform win32-g++ \
          -device-option CROSS_COMPILE=x86_64-w64-mingw32- \
          -prefix /opt/qt5-mingw \
          -no-opengl \
          -no-dbus \
          -no-vcproj \
          -no-qml-debug \
          -no-multimedia \
          -no-audio-backend \
          -no-wmf-backend \
          -no-qt3support \
          -no-webkit \
          -no-phonon \
          -no-phonon-backend \
          -no-svg \
          -no-declarative \
          -no-declarative-debug \
          -no-script \
          -no-scripttools \
          -nomake examples \
          -nomake demos \
          -nomake tests
        
        make -j$(nproc)
        sudo make install

    - name: Download DirectX SDK headers
      run: |
        # Create DirectX headers directory
        sudo mkdir -p /usr/x86_64-w64-mingw32/include/d3d9
        
        # Download basic DirectX 9 headers (alternative approach)
        wget -q https://raw.githubusercontent.com/apitrace/dxsdk/master/Include/d3d9.h -O /tmp/d3d9.h
        wget -q https://raw.githubusercontent.com/apitrace/dxsdk/master/Include/d3dx9.h -O /tmp/d3dx9.h
        wget -q https://raw.githubusercontent.com/apitrace/dxsdk/master/Include/d3dx9core.h -O /tmp/d3dx9core.h
        
        sudo cp /tmp/d3d9*.h /usr/x86_64-w64-mingw32/include/
        
        # Create symbolic links for library files
        sudo mkdir -p /usr/x86_64-w64-mingw32/lib
        
        # Download DirectX libraries
        wget -q https://github.com/microsoft/DirectXTK/releases/download/feb2023/directxtk_desktop_win10_2022.zip -O /tmp/dx.zip
        cd /tmp && unzip -q dx.zip || true

    - name: Set up environment variables
      run: |
        echo "QTDIR=/opt/qt5-mingw" >> $GITHUB_ENV
        echo "PATH=/opt/qt5-mingw/bin:$PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/qt5-mingw/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Create qmake cross-compilation spec
      run: |
        sudo mkdir -p /opt/qt5-mingw/mkspecs/win32-g++-cross
        cat > /tmp/qmake.conf << 'EOF'
        MAKEFILE_GENERATOR      = MINGW
        QMAKE_PLATFORM          = win32 mingw
        CONFIG                 += debug_and_release debug_and_release_target precompile_header
        DEFINES                += UNICODE _UNICODE WIN32 MINGW_HAS_SECURE_API=1
        QMAKE_COMPILER_DEFINES += __GNUC__ WIN32

        QMAKE_CC                = x86_64-w64-mingw32-gcc
        QMAKE_CXX               = x86_64-w64-mingw32-g++
        QMAKE_LINK              = x86_64-w64-mingw32-g++
        QMAKE_LINK_SHLIB        = x86_64-w64-mingw32-g++

        QMAKE_AR                = x86_64-w64-mingw32-ar -ru
        QMAKE_OBJCOPY           = x86_64-w64-mingw32-objcopy
        QMAKE_NM                = x86_64-w64-mingw32-nm -P
        QMAKE_STRIP             = x86_64-w64-mingw32-strip

        QMAKE_INCDIR            = /usr/x86_64-w64-mingw32/include
        QMAKE_LIBDIR            = /usr/x86_64-w64-mingw32/lib

        QMAKE_RC                = x86_64-w64-mingw32-windres
        QMAKE_LFLAGS           += -Wl,-subsystem,windows
        QMAKE_LFLAGS_RELEASE   += -static -static-libgcc -static-libstdc++

        load(qt_config)
        EOF
        
        sudo cp /tmp/qmake.conf /opt/qt5-mingw/mkspecs/win32-g++-cross/
        echo "include(../common/g++-win32.conf)" | sudo tee /opt/qt5-mingw/mkspecs/win32-g++-cross/qmake.conf
        echo "load(qt_config)" | sudo tee -a /opt/qt5-mingw/mkspecs/win32-g++-cross/qmake.conf

    - name: Build project
      run: |
        # Ensure we're in the right directory
        ls -la
        
        # Check if .pro file exists
        if [ ! -f "CustomLoadScreen.pro" ]; then
          echo "Error: CustomLoadScreen.pro not found!"
          find . -name "*.pro" -type f
          exit 1
        fi
        
        # Generate Makefile
        export QTDIR=/opt/qt5-mingw
        export PATH=/opt/qt5-mingw/bin:$PATH
        
        # Try to use system qmake with cross-compilation
        x86_64-w64-mingw32-qmake-qt5 CustomLoadScreen.pro || qmake -spec linux-g++-64 CustomLoadScreen.pro
        
        # Build the project
        make -j$(nproc)
        
        # Check if build was successful
        if [ -f "CustomLoadScreen.asi" ]; then
          echo "Build successful! CustomLoadScreen.asi created."
          ls -la CustomLoadScreen.asi
          file CustomLoadScreen.asi
        else
          echo "Build failed! No .asi file found."
          find . -name "*.asi" -o -name "*.dll" -o -name "*.so" | head -10
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: CustomLoadScreen-ASI
        path: |
          CustomLoadScreen.asi
          *.dll
          *.exe
        retention-days: 30

    - name: Create Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: CustomLoadScreen Build ${{ github.run_number }}
        files: |
          CustomLoadScreen.asi
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Debug information
      if: failure()
      run: |
        echo "=== Debug Information ==="
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Qt version and tools:"
        which qmake || echo "qmake not found"
        qmake -v || echo "qmake version failed"
        echo "MinGW tools:"
        which x86_64-w64-mingw32-gcc || echo "mingw gcc not found"
        x86_64-w64-mingw32-gcc --version || echo "mingw gcc version failed"
        echo "Environment variables:"
        env | grep -i qt || echo "No Qt env vars"
        echo "Make output (last 50 lines):"
        tail -50 make.log || echo "No make log found"
