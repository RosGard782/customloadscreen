name: Build .asi Script

on:
  push:
    branches: [main, master]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies for MXE
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake autopoint bash bison bzip2 cmake flex g++ gperf intltool \
            libffi-dev libgdk-pixbuf2.0-dev libgl1-mesa-dev libltdl-dev \
            libssl-dev libtool-bin libxml-parser-perl lzip make openssl \
            python3 python3-mako python3-pip ruby sed unzip wget xz-utils

      - name: Cache MXE build
        uses: actions/cache@v4
        with:
          path: mxe
          key: mxe-i686-qtbase-v1-${{ runner.os }}-${{ hashFiles('**/mxe-version.txt') }}
          restore-keys: |
            mxe-i686-qtbase-v1-${{ runner.os }}-

      - name: Prepare mxe-version.txt
        run: echo "qtbase" > mxe-version.txt

      - name: Clone and download MXE Qt5 (if not cached)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/mxe/mxe.git --depth=1
          cd mxe
          make download qtbase MXE_TARGETS='i686-w64-mingw32.static'

      - name: Build MXE qtbase (Qt5, if not cached)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd mxe
          make qtbase MXE_TARGETS='i686-w64-mingw32.static' -j$(nproc)

      - name: Find qmake for i686-w64-mingw32
        id: find-qmake
        run: |
          QMAKE=$(find $GITHUB_WORKSPACE/mxe/usr/ -type f -name qmake | grep i686 | grep qt5 | head -n 1)
          if [ -z "$QMAKE" ]; then
            echo "qmake not found"
            exit 1
          fi
          echo "QMAKE=$QMAKE" >> $GITHUB_ENV

      - name: Build .asi with qmake and make (i686)
        run: |
          export PATH="$GITHUB_WORKSPACE/mxe/usr/bin:$PATH"
          export QTDIR=$GITHUB_WORKSPACE/mxe/usr/i686-w64-mingw32.static/qt5
          export QMAKESPEC=$QTDIR/mkspecs/win32-g++
          export CC=i686-w64-mingw32.static-gcc
          export CXX=i686-w64-mingw32.static-g++
          rm -f Makefile Makefile.Release
          rm -rf release
          $QMAKE -spec win32-g++ CONFIG+=release CustomLoadScreen.pro
          make -j$(nproc)

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: customloadscreen-artifacts
          path: |
            CustomLoadScreen.asi
            CustomLoadScreen.png
