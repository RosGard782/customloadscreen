name: Build CustomLoadScreen ASI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: openscad/mxe-i686-deps
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MXE environment
      run: |
        export PATH="/mxe/usr/bin/:${PATH}"
        echo "PATH=/mxe/usr/bin/:${PATH}" >> $GITHUB_ENV
        
        # Find MXE structure
        echo "=== MXE Directory Structure ==="
        ls -la /mxe/ 2>/dev/null || echo "/mxe not found"
        ls -la /mxe/usr/ 2>/dev/null || echo "/mxe/usr not found"
        ls -la /mxe/usr/bin/ 2>/dev/null || echo "/mxe/usr/bin not found"
        
        # Find Qt5 installation
        echo "=== Looking for Qt5 ==="
        find /mxe -name "qmake*" -type f 2>/dev/null || echo "No qmake found"
        find /mxe -name "*mingw*" -type d | head -10 || echo "No mingw dirs found"
        
        # Find correct MXE target
        ls -la /mxe/usr/ | grep mingw || echo "No mingw targets found"

    - name: Build project
      run: |
        # Set PATH to include MXE tools
        export PATH="/mxe/usr/bin/:${PATH}"
        
        echo "=== Environment Check ==="
        echo "PATH: $PATH"
        echo "PWD: $(pwd)"
        echo "Available files:"
        ls -la
        
        echo "=== Find correct qmake path ==="
        QMAKE_PATH=""
        
        # Try to find qmake in various possible locations
        for path in \
          "/mxe/usr/i686-w64-mingw32.static.posix/qt5/bin/qmake" \
          "/mxe/usr/i686-w64-mingw32.static/qt5/bin/qmake" \
          "/mxe/usr/i686-w64-mingw32.shared.posix/qt5/bin/qmake" \
          "/mxe/usr/i686-w64-mingw32.shared/qt5/bin/qmake" \
          "/mxe/usr/bin/i686-w64-mingw32.static.posix-qmake-qt5" \
          "/mxe/usr/bin/i686-w64-mingw32.static-qmake-qt5" \
          "/mxe/usr/bin/i686-w64-mingw32-qmake-qt5" \
          $(find /mxe -name "*qmake*" -type f 2>/dev/null)
        do
          if [ -x "$path" ]; then
            echo "Found qmake at: $path"
            QMAKE_PATH="$path"
            break
          fi
        done
        
        if [ -z "$QMAKE_PATH" ]; then
          echo "ERROR: Could not find qmake"
          echo "Available MXE targets:"
          ls -la /mxe/usr/ | grep mingw
          echo "Available binaries:"
          ls -la /mxe/usr/bin/ | grep qmake
          exit 1
        fi
        
        echo "Using qmake: $QMAKE_PATH"
        $QMAKE_PATH --version
        
        echo "=== Building project ==="
        # Use found qmake path
        $QMAKE_PATH CONFIG+=release CustomLoadScreen.pro
        
        # Check if Makefile was generated
        if [ -f "Makefile" ]; then
          echo "Makefile generated successfully"
          ls -la Makefile
        else
          echo "ERROR: No Makefile generated"
          exit 1
        fi
        
        # Build with make
        make -j$(nproc --all)
        
        echo "=== Build results ==="
        ls -la
        
        # Check for output files
        if [ -f "CustomLoadScreen.asi" ]; then
          echo "SUCCESS: CustomLoadScreen.asi built successfully!"
          ls -la CustomLoadScreen.asi
          file CustomLoadScreen.asi
        else
          echo "ERROR: CustomLoadScreen.asi not found"
          echo "Looking for any output files:"
          find . -name "*.asi" -o -name "*.dll" -o -name "*.exe" 2>/dev/null || echo "No output files found"
          exit 1
        fi

    - name: Verify artifacts
      run: |
        echo "=== Final artifact check ==="
        ls -la CustomLoadScreen.asi || echo "ASI file missing"
        ls -la CustomLoadScreen.png || echo "PNG file missing (optional)"
        
        if [ -f "CustomLoadScreen.asi" ]; then
          echo "File size: $(stat -c%s CustomLoadScreen.asi) bytes"
          echo "File type: $(file CustomLoadScreen.asi)"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: CustomLoadScreen-ASI-Build
        path: |
          CustomLoadScreen.asi
          CustomLoadScreen.png
        retention-days: 30

    - name: Create Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: CustomLoadScreen Release v${{ github.run_number }}
        body: |
          Automated build of CustomLoadScreen ASI
          
          **Files included:**
          - `CustomLoadScreen.asi` - Main ASI plugin file
          - `CustomLoadScreen.png` - Loading screen image (if available)
          
          **Installation:**
          1. Download `CustomLoadScreen.asi`
          2. Place it in your game's root directory or scripts folder
          3. Ensure `CustomLoadScreen.png` is in the same directory if using custom image
        files: |
          CustomLoadScreen.asi
          CustomLoadScreen.png
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache build objects
      uses: actions/cache@v4
      with:
        path: release/*.o
        key: ${{ runner.os }}-build-objects-${{ hashFiles('**/*.cpp', '**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-build-objects-

    - name: Debug information
      if: failure()
      run: |
        echo "=== Debug Information ==="
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "PATH variable:"
        echo $PATH
        echo "MXE directory structure:"
        ls -la /mxe/usr/ 2>/dev/null || echo "MXE not found"
        ls -la /mxe/usr/bin/ 2>/dev/null || echo "MXE bin not found"
        echo "Qt5 directory:"
        ls -la /mxe/usr/i686-w64-mingw32.static.posix/qt5/ 2>/dev/null || echo "Qt5 not found"
        echo "Generated Makefile (first 50 lines):"
        head -50 Makefile 2>/dev/null || echo "No Makefile found"
        echo "Make output:"
        tail -50 make.log 2>/dev/null || echo "No make log found"
        echo "Error logs:"
        find . -name "*.log" -exec cat {} \; 2>/dev/null || echo "No log files found"
